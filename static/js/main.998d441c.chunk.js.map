{"version":3,"sources":["components/Header.js","components/SearchNav.js","components/DataBody.js","components/DataTable.js","components/DataContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","SearchNav","employeeSearch","type","placeholder","aria-label","onChange","e","target","value","name","id","DataBody","employee","alt","first","last","src","picture","thumbnail","phone","email","dob","date","DataTable","employees","employeeSort","onClick","map","index","key","DataContainer","App","useState","setEmployees","filteredEmployees","setFilteredEmployees","setSortedEmployees","useEffect","axios","get","then","res","data","results","catch","err","console","log","searchInput","searchTerm","toLowerCase","searchResults","filter","startsWith","sortResults","sort","a","b","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"wQAceA,MAXf,WACI,OACI,oCACA,yBAAKC,UAAU,kCACX,0BAAMA,UAAU,+BAAhB,uBAEJ,+BCkBOC,MAxBf,YAAwC,IAAnBC,EAAkB,EAAlBA,eACjB,OACI,oCACA,yBAAKF,UAAU,gCACX,0BAAMA,UAAU,UACZ,2BACAA,UAAU,eACVG,KAAK,OACLC,YAAY,iBACZC,aAAW,SACXC,SAAU,SAACC,GAEPL,EAAeK,EAAEC,OAAOC,QAE5BC,KAAK,SACLC,GAAG,aAIX,+BCJOC,EAfE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEhB,OACI,+BACI,4BACI,4BAAI,yBAAKb,UAAU,YAAYc,IAAG,UAAKD,EAASH,KAAKK,MAAnB,YAA4BF,EAASH,KAAKM,MAAQC,IAAKJ,EAASK,QAAQC,YAA1G,KACA,sCAAQN,EAASH,KAAKK,MAAtB,YAA+BF,EAASH,KAAKM,OAC7C,4BAAKH,EAASO,OACd,4BAAKP,EAASQ,OACd,4BAAKR,EAASS,IAAIC,SCmCnBC,EA1CG,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAI5B,OACI,2BAAO1B,UAAU,mCACb,+BACI,4BACI,qCAGA,wBACA2B,QAAS,WACLD,MAFJ,QAOA,qCAGA,qCAGA,qCAKPD,EAAUG,KAAI,SAACf,EAAUgB,GACtB,OAEI,kBAAC,EAAD,CACAC,IAAKD,EACLhB,SAAUA,SCnBfkB,EAbO,SAAC,GAA+B,IAA9BN,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,aAC3B,OACI,oCACA,kBAAC,EAAD,CAEAD,UAAWA,EACXC,aAAcA,M,iBC4DXM,MAlEf,WAAe,MAEoBC,mBAAS,IAF7B,mBAENR,EAFM,KAEKS,EAFL,OAIoCD,mBAAS,IAJ7C,mBAINE,EAJM,KAIaC,EAJb,OAMiCH,mBAAS,IAN1C,mBAMWI,GANX,WAiDb,OAxCEC,qBAAU,WACNC,IAAMC,IAAI,gDACTC,MAAK,SAAAC,GACJR,EAAaQ,EAAIC,KAAKC,SACtBR,EAAqBM,EAAIC,KAAKC,SAC9BP,EAAmBK,EAAIC,KAAKC,YAE7BC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC3B,IAiCH,yBAAK9C,UAAU,OACX,kBAAC,EAAD,MACF,yBAAKA,UAAU,aACb,kBAAC,EAAD,CACAE,eAlCmB,SAAC+C,GAEpB,GAAKA,EAGE,CACL,IAAMC,EAAaD,EAAYE,cACxBC,EAAgB3B,EAAU4B,QAAO,SAAAxC,GAAQ,OAAIA,EAASH,KAAKK,MAAMoC,cAAcG,WAAWJ,IAAerC,EAASH,KAAKM,KAAKmC,cAAcG,WAAWJ,MAC5Jd,EAAqBgB,QALrBL,QAAQC,IAAI,kBACZZ,EAAqBX,MAgCvB,kBAAC,EAAD,CAEEA,UAAWU,EACXT,aA1Be,WACnBqB,QAAQC,IAAI,2BACZ,IAEMO,EAFQ,YAAO9B,GAEQ+B,MAAK,SAACC,EAAGC,GACpC,OAAID,EAAE/C,KAAKM,KAAO0C,EAAEhD,KAAKM,KAChB,GAEC,KAIZoB,EAAqBmB,SCxCPI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd5B,OAAM,SAAA6B,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.998d441c.chunk.js","sourcesContent":["//dependencies\r\nimport React from 'react'\r\n\r\nfunction Header() {\r\n    return (\r\n        <>\r\n        <nav className=\"navbar navbar-light bg-success\">\r\n            <span className=\"navbar-brand mb-0 h1 col-12\">Employee Directory</span>\r\n        </nav>\r\n        <br />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header","//dependencies\r\nimport React, {useState} from 'react'\r\n\r\nfunction SearchNav( {employeeSearch} ) {\r\n    return (\r\n        <>\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n            <form className=\"col-12\">\r\n                <input\r\n                className=\"form-control\"\r\n                type=\"text\"\r\n                placeholder=\"Search By Name\"\r\n                aria-label=\"Search\"\r\n                onChange={(e) => {\r\n                    //setting the search term to whaever is typed into the form\r\n                    employeeSearch(e.target.value)\r\n                }}\r\n                name=\"search\"\r\n                id=\"search\"\r\n                />\r\n            </form>\r\n        </nav>\r\n        <br />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SearchNav","//dependencies\r\nimport React from 'react'\r\n\r\nconst DataBody = ( {employee} ) => {\r\n    //code\r\n    return (\r\n        <tbody>\r\n            <tr>\r\n                <td><img className=\"img-fluid\" alt={`${employee.name.first} ${employee.name.last}`} src={employee.picture.thumbnail} /> </td>\r\n                <td>{`${employee.name.first} ${employee.name.last}`}</td>\r\n                <td>{employee.phone}</td>\r\n                <td>{employee.email}</td>\r\n                <td>{employee.dob.date}</td>\r\n            </tr>\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default DataBody","//dependencies\r\nimport React, { useEffect, useState } from 'react'\r\n//components\r\nimport DataBody from './DataBody'\r\n\r\nconst DataTable = ( {employees, employeeSort} ) => {\r\n    //code\r\n    \r\n\r\n    return (\r\n        <table className=\"table table-striped table-hover\">\r\n            <thead>\r\n                <tr>\r\n                    <th>\r\n                        Image\r\n                    </th>\r\n                    <th\r\n                    onClick={()=>{\r\n                        employeeSort()\r\n                    }}\r\n                    >\r\n                        Name\r\n                    </th>\r\n                    <th>\r\n                        Phone\r\n                    </th>\r\n                    <th>\r\n                        Email\r\n                    </th>\r\n                    <th>\r\n                        DOB\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            {employees.map((employee, index) => {\r\n                return (\r\n\r\n                    <DataBody\r\n                    key={index}\r\n                    employee={employee}\r\n                    />\r\n                )\r\n            })}\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default DataTable","//dependencies\r\nimport React from 'react'\r\n\r\n//components\r\nimport DataTable from './DataTable'\r\n\r\n//this is actually a totally unecessary component, but keeping it in place anyway\r\nconst DataContainer = ({employees, employeeSort}) => {\r\n        return(\r\n            <>\r\n            <DataTable\r\n            //propping down employees that was set in App.js\r\n            employees={employees}\r\n            employeeSort={employeeSort}\r\n            />\r\n\r\n            </>\r\n        )\r\n    }\r\n\r\nexport default DataContainer","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './components/Header'\nimport SearchNav from './components/SearchNav'\nimport DataContainer from './components/DataContainer'\nimport axios from 'axios'\n\nfunction App() {\n  //state hook. allows to have state inside of functional component\n  const [employees, setEmployees] =useState([])\n  //state hook for filtering employees. ([]) = initial state\n  const [filteredEmployees, setFilteredEmployees] =useState([])\n  //state hook for sorting employees by name\n  const [sortedEmployees, setSortedEmployees] = useState([])\n\n  //effect hook\n    useEffect(() => {\n        axios.get(\"https://randomuser.me/api/?results=50&nat=us\")\n        .then(res => {\n          setEmployees(res.data.results)\n          setFilteredEmployees(res.data.results)\n          setSortedEmployees(res.data.results)\n        })\n        .catch(err => console.log(err))\n    }, [])\n\n    //method to filter the employees by name. WIll prop down to SearchNav. this is a functional component\n    const employeeSearch = (searchInput) => {\n\n        if (!searchInput) {\n          console.log('reseting state')\n          setFilteredEmployees(employees)\n        } else {\n          const searchTerm = searchInput.toLowerCase()\n          const  searchResults = employees.filter(employee => employee.name.first.toLowerCase().startsWith(searchTerm) || employee.name.last.toLowerCase().startsWith(searchTerm))\n          setFilteredEmployees(searchResults)\n        }\n    }\n\n    //method to sort employees by name. Will prop down to DataTable. this is a functional component\n    const employeeSort = () => {\n      console.log('inisde of employee sort')\n      const sortEmpl = [...employees]\n  \n      const sortResults = sortEmpl.sort((a, b) => {\n        if (a.name.last > b.name.last) {\n          return 1\n        } else {\n          return -1\n        }\n      })\n\n      setFilteredEmployees(sortResults)\n  \n    }\n\n  return (\n    <div className=\"App\">\n        <Header />\n      <div className=\"container\">\n        <SearchNav\n        employeeSearch={employeeSearch}\n        />\n        <DataContainer\n        //this is propping data into the datacontainer. calling the props employees, and fileteredEmployees is the hook\n          employees={filteredEmployees}\n          employeeSort={employeeSort}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}